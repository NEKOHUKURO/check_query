start start_start -> select
select start_select -> *
* select_* -> from
from *_from -> COLUMN
from from_COLUMN -> ;
; COLUMN_; -> ;
select start_select -> COLUMN
select select_COLUMN -> ,
select COLUMN_, -> COLUMN
select ,_COLUMN -> ,
select ,_COLUMN -> from
from COLUMN_from -> COLUMN
select select_COLUMN -> from
select start_select -> distinct
distinct select_distinct -> COLUMN
distinct distinct_COLUMN -> from
select select_COLUMN -> (
( COLUMN_( -> distinct
distinct (_distinct -> COLUMN
distinct distinct_COLUMN -> )
select COLUMN_) -> from
from )_from -> COLUMN
from from_COLUMN -> where
where COLUMN_where -> COLUMN
where where_COLUMN -> =
= COLUMN_= -> VALUE
= =_VALUE -> ;
; VALUE_; -> ;
= =_VALUE -> and
and VALUE_and -> COLUMN
and and_COLUMN -> =
= =_VALUE -> or
or VALUE_or -> COLUMN
or or_COLUMN -> =
where COLUMN_where -> not
not where_not -> COLUMN
not not_COLUMN -> =
and VALUE_and -> (
( and_( -> COLUMN
( (_COLUMN -> =
= =_VALUE -> )
and VALUE_) -> ;
; )_; -> ;
and VALUE_and -> not
not and_not -> COLUMN
from from_COLUMN -> order
order COLUMN_order -> by
by order_by -> COLUMN
by by_COLUMN -> ;
by by_COLUMN -> desc
desc COLUMN_desc -> ;
; desc_; -> ;
by by_COLUMN -> ,
by COLUMN_, -> COLUMN
by ,_COLUMN -> ;
by by_COLUMN -> asc
asc COLUMN_asc -> ,
asc asc_, -> COLUMN
asc ,_COLUMN -> desc
start start_start -> COLUMN
start start_COLUMN -> into
into COLUMN_into -> COLUMN
into into_COLUMN -> (
( COLUMN_( -> COLUMN
( (_COLUMN -> ,
( COLUMN_, -> COLUMN
( ,_COLUMN -> ,
( ,_COLUMN -> )
into COLUMN_) -> COLUMN
into )_COLUMN -> (
( COLUMN_( -> VALUE
( (_VALUE -> ,
( VALUE_, -> VALUE
( ,_VALUE -> ,
( ,_VALUE -> )
into VALUE_) -> ;
where where_COLUMN -> is
is COLUMN_is -> null
null is_null -> ;
; null_; -> ;
is COLUMN_is -> not
not is_not -> null
null not_null -> ;
start start_COLUMN -> COLUMN
start COLUMN_COLUMN -> COLUMN
start COLUMN_COLUMN -> =
= =_VALUE -> ,
= VALUE_, -> COLUMN
= ,_COLUMN -> =
= =_VALUE -> where
where VALUE_where -> COLUMN
start start_COLUMN -> from
where COLUMN_where -> condition
condition where_condition -> ;
; condition_; -> ;
( (_COLUMN -> )
condition where_condition -> limit
limit condition_limit -> COLUMN
limit limit_COLUMN -> ;
from from_COLUMN -> limit
limit COLUMN_limit -> VALUE
limit limit_VALUE -> ;
limit limit_VALUE -> offset
offset VALUE_offset -> VALUE
offset offset_VALUE -> ;
= =_VALUE -> limit
limit VALUE_limit -> VALUE
select COLUMN_) -> as
as )_as -> COLUMN
as as_COLUMN -> from
where where_COLUMN -> like
like COLUMN_like -> VALUE
like like_VALUE -> ;
where where_COLUMN -> not
not COLUMN_not -> like
like not_like -> VALUE
where where_COLUMN -> in
in COLUMN_in -> (
( in_( -> select
select (_select -> COLUMN
select select_COLUMN -> )
in COLUMN_) -> ;
( in_( -> VALUE
in VALUE_) -> ;
not COLUMN_not -> in
in not_in -> (
from from_COLUMN -> )
where where_COLUMN -> COLUMN
where COLUMN_COLUMN -> COLUMN
where COLUMN_COLUMN -> and
and COLUMN_and -> COLUMN
and and_COLUMN -> ;
where COLUMN_COLUMN -> VALUE
where COLUMN_VALUE -> and
and VALUE_and -> VALUE
and and_VALUE -> ;
not COLUMN_not -> COLUMN
not not_COLUMN -> VALUE
not COLUMN_VALUE -> and
and and_VALUE -> and
and and_COLUMN -> not
and and_VALUE -> order
order VALUE_order -> by
select select_COLUMN -> as
as COLUMN_as -> COLUMN
from from_COLUMN -> as
as as_COLUMN -> ;
as as_COLUMN -> ,
as COLUMN_, -> COLUMN
as ,_COLUMN -> as
as COLUMN_as -> VALUE
as as_VALUE -> from
from VALUE_from -> COLUMN
select ,_COLUMN -> (
( VALUE_, -> COLUMN
as as_COLUMN -> where
= COLUMN_= -> COLUMN
= =_COLUMN -> ;
from from_COLUMN -> ,
from COLUMN_, -> COLUMN
from ,_COLUMN -> where
from from_COLUMN -> inner
inner COLUMN_inner -> join
join inner_join -> COLUMN
join join_COLUMN -> on
on COLUMN_on -> COLUMN
on on_COLUMN -> =
from COLUMN_from -> (
( from_( -> (
( (_( -> COLUMN
( (_COLUMN -> inner
= =_COLUMN -> )
( COLUMN_) -> inner
inner )_inner -> join
from COLUMN_) -> ;
from from_COLUMN -> left
left COLUMN_left -> join
join left_join -> COLUMN
= =_COLUMN -> order
from from_COLUMN -> right
right COLUMN_right -> join
join right_join -> COLUMN
from from_COLUMN -> cross
cross COLUMN_cross -> join
join cross_join -> COLUMN
join join_COLUMN -> ;
join join_COLUMN -> where
from from_COLUMN -> COLUMN
from COLUMN_COLUMN -> ,
from ,_COLUMN -> COLUMN
from COLUMN_COLUMN -> where
as ,_COLUMN -> from
where where_COLUMN -> >
> COLUMN_> -> <
< >_< -> COLUMN
< <_COLUMN -> and
from from_COLUMN -> union
union COLUMN_union -> select
select union_select -> COLUMN
union COLUMN_union -> all
all union_all -> select
select all_select -> COLUMN
= =_VALUE -> union
union VALUE_union -> select
= =_VALUE -> order
union VALUE_union -> all
select start_select -> VALUE
select select_VALUE -> as
as VALUE_as -> COLUMN
as ,_COLUMN -> ,
select union_select -> VALUE
select select_VALUE -> ,
select VALUE_, -> COLUMN
condition where_condition -> group
group condition_group -> by
by group_by -> COLUMN
by by_COLUMN -> (
by COLUMN_) -> order
order )_order -> by
by COLUMN_) -> ;
select COLUMN_) -> ,
select )_, -> COLUMN
from from_COLUMN -> group
group COLUMN_group -> by
by by_COLUMN -> order
by COLUMN_) -> desc
desc )_desc -> ;
= =_COLUMN -> group
by COLUMN_) -> having
having )_having -> condition
condition having_condition -> order
order condition_order -> by
by by_COLUMN -> having
having COLUMN_having -> COLUMN
having having_COLUMN -> (
having COLUMN_) -> <
< )_< -> VALUE
< <_VALUE -> ;
< <_VALUE -> order
( from_( -> COLUMN
from COLUMN_) -> group
group )_group -> by
= =_COLUMN -> where
= =_VALUE -> group
group VALUE_group -> by
where COLUMN_where -> exists
exists where_exists -> (
( exists_( -> select
condition where_condition -> )
exists condition_) -> ;
= =_COLUMN -> and
and and_COLUMN -> >
> COLUMN_> -> VALUE
> >_VALUE -> )
exists VALUE_) -> ;
where COLUMN_COLUMN -> any
any COLUMN_any -> (
( any_( -> select
any condition_) -> ;
select start_select -> all
all select_all -> COLUMN
all all_COLUMN -> (
all COLUMN_) -> from
where COLUMN_COLUMN -> all
all COLUMN_all -> (
( all_( -> select
all condition_) -> ;
= COLUMN_= -> any
any =_any -> (
any VALUE_) -> ;
where where_COLUMN -> <
< COLUMN_< -> VALUE
< <_VALUE -> )
all all_COLUMN -> from
where COLUMN_where -> true
true where_true -> ;
; true_; -> ;
= COLUMN_= -> all
all =_all -> (
all VALUE_) -> ;
into into_COLUMN -> select
select COLUMN_select -> *
into COLUMN_) -> select
select )_select -> COLUMN
start start_start -> case
case start_case -> when
when case_when -> COLUMN
when when_COLUMN -> then
then COLUMN_then -> COLUMN
then then_COLUMN -> when
when COLUMN_when -> COLUMN
then then_COLUMN -> else
else COLUMN_else -> result
result else_result -> end
end result_end -> ;
; end_; -> ;
select COLUMN_, -> case
case ,_case -> when
when when_COLUMN -> <
< <_VALUE -> then
then VALUE_then -> VALUE
then then_VALUE -> when
when VALUE_when -> COLUMN
when when_COLUMN -> =
= =_VALUE -> then
then then_VALUE -> else
else VALUE_else -> VALUE
else else_VALUE -> end
end VALUE_end -> as
as end_as -> COLUMN
by order_by -> (
( by_( -> case
case (_case -> when
when when_COLUMN -> is
null is_null -> then
then null_then -> COLUMN
else COLUMN_else -> COLUMN
else else_COLUMN -> end
end COLUMN_end -> )
by end_) -> ;
select ,_COLUMN -> *
* COLUMN_* -> (
( *_( -> COLUMN
( (_COLUMN -> +
+ COLUMN_+ -> COLUMN
+ +_COLUMN -> )
* COLUMN_) -> from
+ +_COLUMN -> (
( COLUMN_, -> VALUE
+ VALUE_) -> )
* )_) -> from
start start_start -> create
create start_create -> COLUMN
create create_COLUMN -> COLUMN
create COLUMN_COLUMN -> ;
start start_start -> drop
drop start_drop -> COLUMN
drop drop_COLUMN -> COLUMN
drop COLUMN_COLUMN -> ;
create start_create -> table
table create_table -> COLUMN
table table_COLUMN -> (
( (_COLUMN -> COLUMN
( COLUMN_COLUMN -> ,
( ,_COLUMN -> COLUMN
( COLUMN_COLUMN -> (
( (_VALUE -> )
( VALUE_) -> ,
( )_, -> COLUMN
( VALUE_) -> )
table )_) -> ;
table table_COLUMN -> as
as COLUMN_as -> select
select as_select -> COLUMN
drop start_drop -> table
table drop_table -> COLUMN
table table_COLUMN -> ;
start start_COLUMN -> table
table COLUMN_table -> COLUMN
table table_COLUMN -> COLUMN
table COLUMN_COLUMN -> COLUMN
table COLUMN_COLUMN -> ;
table COLUMN_COLUMN -> (
table VALUE_) -> ;
table table_COLUMN -> drop
drop COLUMN_drop -> column
column drop_column -> COLUMN
column column_COLUMN -> ;
table COLUMN_COLUMN -> column
column COLUMN_column -> COLUMN
column column_COLUMN -> COLUMN
column COLUMN_COLUMN -> ;
table COLUMN_COLUMN -> date
date COLUMN_date -> ;
; date_; -> ;
( COLUMN_COLUMN -> not
not COLUMN_not -> null
null not_null -> ,
null null_, -> COLUMN
null ,_COLUMN -> COLUMN
null COLUMN_COLUMN -> (
null VALUE_) -> not
not )_not -> null
null COLUMN_COLUMN -> )
table COLUMN_) -> ;
table COLUMN_COLUMN -> not
null VALUE_) -> ,
null )_, -> COLUMN
null COLUMN_COLUMN -> ,
null COLUMN_, -> unique
unique ,_unique -> (
( unique_( -> COLUMN
unique COLUMN_) -> )
null COLUMN_, -> constraint
constraint ,_constraint -> COLUMN
constraint constraint_COLUMN -> unique
unique COLUMN_unique -> (
table COLUMN_COLUMN -> unique
unique COLUMN_) -> ;
table COLUMN_COLUMN -> constraint
constraint COLUMN_constraint -> COLUMN
drop COLUMN_drop -> COLUMN
null COLUMN_, -> primary
primary ,_primary -> COLUMN
primary primary_COLUMN -> (
primary COLUMN_) -> )
constraint constraint_COLUMN -> primary
primary COLUMN_primary -> COLUMN
table COLUMN_COLUMN -> primary
primary COLUMN_) -> ;
drop COLUMN_drop -> primary
primary drop_primary -> COLUMN
primary primary_COLUMN -> ;
null COLUMN_COLUMN -> not
primary COLUMN_) -> ,
primary )_, -> foreign
foreign ,_foreign -> COLUMN
foreign foreign_COLUMN -> (
foreign COLUMN_) -> references
references )_references -> COLUMN
references references_COLUMN -> (
references COLUMN_) -> )
primary )_, -> constraint
constraint constraint_COLUMN -> foreign
foreign COLUMN_foreign -> COLUMN
table COLUMN_COLUMN -> foreign
references COLUMN_) -> ;
drop COLUMN_drop -> foreign
foreign drop_foreign -> COLUMN
foreign foreign_COLUMN -> COLUMN
foreign COLUMN_COLUMN -> ;
null COLUMN_, -> check
check ,_check -> (
( check_( -> COLUMN
( (_COLUMN -> <
< COLUMN_< -> =
= <_= -> VALUE
check VALUE_) -> )
null COLUMN_, -> COLUMN
null )_, -> constraint
constraint constraint_COLUMN -> check
check COLUMN_check -> (
table COLUMN_COLUMN -> check
check VALUE_) -> ;
drop COLUMN_drop -> check
check drop_check -> COLUMN
check check_COLUMN -> ;
null VALUE_) -> default
default )_default -> VALUE
default default_VALUE -> )
null ,_COLUMN -> date
date COLUMN_date -> default
default date_default -> current_date
current_date default_current_date -> (
( current_date_( -> )
current_date (_) -> )
table COLUMN_COLUMN -> default
default COLUMN_default -> VALUE
default default_VALUE -> ;
table COLUMN_COLUMN -> drop
drop COLUMN_drop -> default
default drop_default -> ;
; default_; -> ;
create COLUMN_COLUMN -> on
on on_COLUMN -> (
on COLUMN_) -> ;
null not_null -> COLUMN
null null_COLUMN -> ,
table COLUMN_COLUMN -> =
create start_create -> view
view create_view -> VALUE
view view_VALUE -> VALUE
view VALUE_VALUE -> as
as VALUE_as -> select
from *_from -> VALUE
from from_VALUE -> VALUE
from VALUE_VALUE -> ;
view view_VALUE -> COLUMN
view VALUE_COLUMN -> COLUMN
view COLUMN_COLUMN -> VALUE
view COLUMN_VALUE -> as
< COLUMN_< -> (
( <_( -> select
< COLUMN_) -> ;
from from_VALUE -> COLUMN
from VALUE_COLUMN -> COLUMN
from COLUMN_COLUMN -> VALUE
from COLUMN_VALUE -> ;
create start_create -> or
or create_or -> COLUMN
or or_COLUMN -> view
view COLUMN_view -> VALUE
drop start_drop -> view
view drop_view -> COLUMN
view view_COLUMN -> ;
view drop_view -> VALUE
view VALUE_VALUE -> ;
< COLUMN_< -> >
> <_> -> VALUE
> >_VALUE -> ;
where where_COLUMN -> /
/ COLUMN_/ -> COLUMN
/ /_COLUMN -> (
( (_COLUMN -> /
/ COLUMN_/ -> VALUE
/ /_VALUE -> ,
/ VALUE_, -> VALUE
/ ,_VALUE -> )
/ VALUE_) -> >
> )_> -> =
= >_= -> VALUE
and and_COLUMN -> /
/ VALUE_) -> <
< <_VALUE -> or
or or_COLUMN -> <
where COLUMN_where -> (
( where_( -> COLUMN
where VALUE_) -> and
and )_and -> COLUMN
and and_COLUMN -> <
select ,_COLUMN -> as
as COLUMN_, -> (
( ,_( -> select
as COLUMN_) -> as
from COLUMN_COLUMN -> left
join join_COLUMN -> COLUMN
join COLUMN_COLUMN -> on
= =_COLUMN -> left
as ,_COLUMN -> (
from COLUMN_COLUMN -> join
join COLUMN_join -> COLUMN
by ,_COLUMN -> order
select start_select -> (
( select_( -> select
from COLUMN_COLUMN -> group
from COLUMN_COLUMN -> order
by ,_COLUMN -> ,
select VALUE_) -> as
and and_VALUE -> group
( ,_COLUMN -> VALUE
( COLUMN_VALUE -> COLUMN
( VALUE_COLUMN -> )
( (_COLUMN -> (
( )_, -> -
- ,_- -> VALUE
- -_VALUE -> )
select start_select -> floor
floor select_floor -> (
( floor_( -> COLUMN
( VALUE_) -> /
/ )_/ -> VALUE
/ /_VALUE -> )
floor VALUE_) -> *
* )_* -> VALUE
* *_VALUE -> as
as COLUMN_) -> ,
as )_, -> COLUMN
as COLUMN_) -> from
desc COLUMN_desc -> limit
limit desc_limit -> VALUE
limit limit_VALUE -> ,
limit VALUE_, -> VALUE
limit ,_VALUE -> ;
select ,_COLUMN -> +
+ +_COLUMN -> from
select VALUE_) -> from
+ +_COLUMN -> as
desc COLUMN_desc -> ,
desc desc_, -> COLUMN
desc ,_COLUMN -> desc
select VALUE_) -> ,
select start_select -> case
case select_case -> when
then null_then -> VALUE
else VALUE_else -> COLUMN
end COLUMN_end -> as
as )_as -> VALUE
as as_VALUE -> ,
as VALUE_, -> COLUMN
where COLUMN_where -> VALUE
where where_VALUE -> <
< VALUE_< -> =
= <_= -> COLUMN
( COLUMN_( -> *
* (_* -> )
select *_) -> as
= =_COLUMN -> join
from COLUMN_COLUMN -> right
select COLUMN_, -> (
( from_( -> select
by by_COLUMN -> )
from COLUMN_) -> COLUMN
from )_COLUMN -> left
where where_COLUMN -> (
where COLUMN_) -> =
= )_= -> COLUMN
having COLUMN_) -> -
- )_- -> COLUMN
- -_COLUMN -> (
- COLUMN_) -> >
> )_> -> VALUE
as VALUE_as -> VALUE
and and_VALUE -> union
> >_VALUE -> union
> >_VALUE -> order
> COLUMN_> -> (
( >_( -> select
> COLUMN_) -> ;
view create_view -> COLUMN
view view_COLUMN -> as
start start_COLUMN -> view
view COLUMN_view -> COLUMN
view drop_view -> if
if view_if -> exists
exists if_exists -> COLUMN
exists exists_COLUMN -> ;
= COLUMN_= -> (
( =_( -> select
= COLUMN_) -> ;
like like_VALUE -> VALUE
> <_> -> COLUMN
> >_COLUMN -> and
having COLUMN_) -> >
when when_COLUMN -> >
> >_VALUE -> then
; COLUMN_; -> select
select ;_select -> *